{"/administration/k3s":{"title":"Установка k3s","data":{"простая-установка-k3s#Простая установка k3s":"Ставить k3s можно последнюю или с указанием версии (как на рабочей). См. 10-k3s.sh\ncurl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.26.2+k3s1 sh -s - server \\\n--write-kubeconfig-mode=\"0640\"","настройка-путей-к-конфигам#Настройка путей к конфигам":"k3s пишет конфиг в  /etc/rancher/k3s/k3s.yaml. Чтобы он стал доступен openlens, нужно скопировать его в $HOME/.kube/config.\nсм. 20-config.sh\nsudo groupadd -f k3s\nsudo usermod -aG k3s $USER\nsudo chown root:k3s /etc/rancher/k3s/k3s.yaml\nmkdir -p $HOME/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml $HOME/.kube/config\nsudo chown $USER $HOME/.kube/config\nsudo chmod og-rwx $HOME/.kube/config","установить-k3s-с--postgres#Установить k3s с  postgres":"В рабочей среде лучше ставить вариант с базой в Postgres, см. 10-k3s-pg.sh\nУстановить зависимости sudo apt install postgresql postgresql-client\nНастроить доступ к БД из сети см. postgres.sh","создать-бд#Создать БД":"","объединение-конфигов-в-один-файл#Объединение конфигов в один файл":"В переменной KUBECONFIG прописать через : пути к файлам конфигурации и выполнить команду  kubectl config view --flatten\nexport KUBECONFIG=`ls -d $DEST/* | tr '\\n' ':'`\nkubectl config view --flatten > $DEST/config\nmv $DEST/config -f $HOME/.kube/config"}},"/administration/werf":{"title":"Выкладка через werf","data":{"":"Сборка werf запускается при push в репозиторий, результат смотреть в разделе Actions. При успешном завершении проект выкладывается в kubernetes.\nЕсли проект не стартует, можно смотреть логи через openlens.\nНастроить у проекта переменные\nSettings -> Secrets and variables -> Actions, например https://github.com/iconicompany/projecttemplate/settings/secrets/actions\nKUBE_CONFIG_BASE64_DATA - конфиг k3s для прода в base64\nREGISTRY_USERNAME - пользователь для доступа к docker registry (deploy token в gitlab) = iconibot\nREGISTRY_PASSWORD - пароль для доступа к docker registry\nWERF_SECRET_KEY - ключ для шифрованных значений для прода\nВ переменные KUBE_CONFIG_BASE64* нужно грузить сертификат для отдельной учетки, скрипт для генерации\ngenerate-user.sh\nНастроить проект\nКаталоги:\nwerf.yaml - описание проекта\n.helm - шаблоны и переменные helm\n.github - настройки github actions\nDockerfile - настройка сборки проекта\n.dockerignore - исключамые пути\nПервичная настройка делается поиском и заменой названия эталонного проекта в данных каталогах.\nРедактирование секретов\nКлюч шифрования положить в файл $HOME/.werf/global_secret_key или в переменную WERF_SECRET_KEY\nwerf helm secret file edit - редактирование прозвольного файла\nwerf helm secret values edit - редактирование yaml файла values\nСекреты через werf helm secret values грузятся в deployment в открытом виде. Вместо этого лучше делать отдельные секреты secret.yaml\nСоздать пустой проект в gitlab для docker registry\nNew project -> Create blank project.\nЗаполнить\nProject name - имя проекта такое же как на github\nProject URL - выбрать группу такую же, как организацию на github\nInitialize repository with a README - снять галочку\nЛокальный запуск docker для отладки/изучения\nСборка: docker build -t projecttemplate . $*\nЗапуск\ndocker run \\\n  -it \\\n  --rm \\\n  --env-file .env \\\n  -p 3000:3000 \\\n  --add-host=host.docker.internal:host-gateway \\\n  projecttemplate $*\nВажно: --env-file .env - в таком варианте в .env файле не должно быть ковычек в значениях (\")\nИначе ковычки попадают в значение переменной. Пример ошибки:  Error validating datasource db: the URL must start with the protocol postgresql:// or postgres://.\nЛокальный запуск werf для отладки/изучения\nПрописать переменные:\nWERF_ENV=sandbox\nWERF_VALUES_ENV=.helm/values-sandbox.yaml\nWERF_REPO=registry.gitlab.com/iconicompany/projecttemplate\nЗапустить сборку командой werf converge","не-решенные-проблемы#Не решенные проблемы":"Настроить перезапуск проекта при обновлении secret.yaml\nНастройка планировщика cron для запуска заданий из проекта\nСервис для публикации и просмотра логов\nСоздание БД при первом запуске / для ветки\nЧистка docker registry через werf cleanup"}},"/administration/putting":{"title":"Выкладка проекта на avclick","data":{"":"Вместо project_name подствить название проекта\nВместо xxxxx подствить номер первого незанятого порта начиная с 30000\nПроверить занят ли порт можно командой:\nsudo lsof -i:xxxxx\nПерейти в home:\ncd /home\nСоздать папку проекта:\nsudo mkdir project_name\nПерейти в созданную папку:\ncd project_name\nДобавить в проект на гитхабе бота avclickbot с правами админа\nВыкачать проект:\nsudo git clone git@github.com:ilb/project_name.git .\nСоздать пользователя linux для этого проекта с тем же именем что и проект:\nsudo useradd project_name\nДобавить пользователя в группу users\nsudo usermod -a -G users project_name\nСоздать .env:\nsudo cp .env.example .env\nОтредактировать .env\nsudo nano .env\nСоздать БД и пользователя к ней:\ncat scripts/schema.pg.sql | sudo -u postgres psql\nСоздать папку для pm2:\nsudo mkdir .pm2\nСоздать в ней файл processes.json:\nsudo nano .pm2/processes.json\nИ добавить в него обьект:\n{\n    \"apps\" : [{\n        \"cwd\"  : \"/home/project_name\",\n        \"script\" : \"npm\",\n        \"args\"   : \"start -- -H 127.0.0.1 -p xxxxx\",\n        \"interpreter\": \"/bin/bash\",\n        \"ignore_watch\": [\"[\\\\/\\\\\\\\]\\\\./\", \"node_modules\" ],\n        \"log_file\"    : \"/var/log/pm2.project_name/project_name.log\",\n        \"error_file\"  : \"/var/log/pm2.project_name/project_name-err.log\",\n        \"out_file\"    : \"/var/log/pm2.project_name/project_name-out.log\",\n        \"merge_logs\"  : true,\n        \"max_memory_restart\": \"512M\",\n        \"log_date_format\" : \"YYYY-MM-DD HH:mm:ss Z\",\n        \"env\": {\n            \"NODE_EXTRA_CA_CERTS\": \"/etc/ssl/ourCAbundle.crt\"\n        }\n    }]\n}\nСоздать папку для логов pm2:\nsudo mkdir /var/log/pm2.project_name\nДать пользователю права на проект\nsudo chown -R project_name /home/project_name\nДать пользователю права на логи:\nsudo chown -R project_name /var/log/pm2.project_name\nДобавить в блок scripts в файле package.json строки\n\"ilb-build\": \"ldapenv prisma generate && ldapenv next build\",\n\"ilb-deploy\": \"ldapenv prisma migrate deploy\",\n(если их там нет).\n16. Запустить скрипт выкладки:\nsudo /opt/bin/npmdeploygit project_name\n16.1 Если ругается на eslint, то можно отключить его при сборке, добавив следующий код в next.config.js:\n  eslint: {\n    ignoreDuringBuilds: true\n  }\nПосле чего запустить выкладку заново.\n17. Перейти в папку /etc/apache2/apps.d\ncd /etc/apache2/apps.d\nСоздать конфиг проекта:\nsudo nano project_name.conf\nИ заполнить его:\n<Location /project_name>\n    ProxyPass http://127.0.0.1:xxxxx/project_name retry=1\n    ProxyPassReverse http://127.0.0.1:xxxxx/project_name\n</Location>\nПерейти в папку хостов apache2:\ncd /etc/apache2/vhosts.d\nОткрыть необходимый конфиг. К примеру, для выкладки под avclick.ru это файл 01-ssl-avclick.ru.conf:\nsudo nano 01-ssl-avclick.ru.conf\nИ добавить в него строку\nInclude /etc/apache2/apps.d/project_name.conf\nПерезапустить сервер:\nsudo service apache2 restart\nОпционально: запустить сиды:\nnpm run db:seed"}},"/administration/ldap":{"title":"Настройка авторизации LDAP","data":{"":"https://computingforgeeks.com/install-and-configure-openldap-server-ubuntu/sudo apt -y install slapd ldap-utilsДля повторной настройки сервера: sudo dpkg-reconfigure slapd","настройка-клиента#Настройка клиента":"https://computingforgeeks.com/how-to-configure-ubuntu-as-ldap-client/sudo apt -y install libnss-ldap libpam-ldap ldap-utilsДля повторной настройки клиента: sudo dpkg-reconfigure ldap-auth-config","ssh-keys#ssh keys":"https://openssh-ldap-pubkey.readthedocs.io/en/latest/openldap.htmlДобавить аттрибут\ncurl -o openssh-lpk.ldif https://openssh-ldap-pubkey.readthedocs.io/en/latest/_downloads/484070d0b1da0579a2bc2dda709186fd/openssh-lpk.ldif.txt\nsudo ldapadd -H ldapi:/// -Y EXTERNAL -f openssh-lpk.ldif\nСоздать файл /opt/bin/ldapauth.sh\n#!/bin/bash\nuid=$1\nbaseDN=ou=users,dc=iconicompany,dc=com\nldapsearch -x -b $baseDN -s sub \"(&(objectclass=posixAccount)(uid=$uid))\" | sed -n '/^ /{H;d};/sshPublicKey:/x;$g;s/\\n *//g;s/sshPublicKey: //gp'\n/etc/ssh/sshd_config.d/ldapauth.conf:\nAuthorizedKeysCommand /opt/bin/ldapauth.sh\nAuthorizedKeysCommandUser root\nВ конце:sudo service sshd restart"}},"/administration/server":{"title":"Как создать и настроить сервер на Ubuntu","data":{"создать-сервер-в-облаке#Создать сервер в облаке":"","настроить-доступ-ssh-по-ключу#Настроить доступ ssh по ключу":"Для безоспасности лучше настроить вход ssh по ключам.На локальной машине выполяем:\nssh-keygen -t ecdsa (если еще нет ключа)\nssh-copy-id <ip или имя сервера> (копируем ключ на сервер)\nssh <ip или имя сервера> (поверяем вход по ключу)\nНа удаленной машине запрещаем вход по паролю:\nsudo tee /etc/ssh/sshd_config.d/disable_root_login.conf << EOF\nChallengeResponseAuthentication no\nPasswordAuthentication no\nUsePAM no\nPermitRootLogin no\nEOF\nsudo systemctl restart ssh"}},"/development/nodejs/packages":{"title":"Nodejs packages snippets","data":{"add-eslint--prettier#Add eslint + prettier":"pnpm i -D eslint eslint-config-next eslint-config-prettier prettier"}},"/development/guidelines/recommendations":{"title":"Рекомендации к написанию кода","data":{"функции#Функции":"","именование#Именование":"Имя функции должно отражать действие, которое она выполняет.\nПример 1:\n// class DocumentService\nasync createError(error) {\n  await this.errorRepository.create(error);\n}\nФункция добавляет к документу ошибку (в errorRepository создается запись в кросс таблице между документом и справочником).\nЛогичнее назвать функцию addError или registerErrorПример 2:\n<OfferCards\n  offer={offerModel}\n  formKey={currentFormKey}\n  onClick={onClick}\n  bail={currentBail}\n  clientStatus={clientStatus}\n  dealStatus={dealStatus}\n/>\nКомпонент OfferCards содержит событие onClick, которое вызывается, когда пользователь нажимает на карточку. Обработчик этого события, в данном случае, тоже называется onClick, что неправильно, так как от onClick ожидается, что это обработчик нажатия на компонент, определенный в этом файле.\nЛучше переименовать ее в handleOfferCardClick или onOfferCardClick"}},"/development/nodejs/workstation":{"title":"Workstation","data":{"before-you-begin#Before you begin":"To start fullstack development on your PC, you have two options\nInstall Ubuntu/Kubuntu (if you prefer KDE) - recomended way\nInstall chocolatley package manager in Windows OS, or download and install all required packages manully","install-nodejs#Install NodeJS":"curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt-get install -y nodejs\nchoco install nodejs","install-vscode#Install VSCode":"Build and debug modern web and cloud applications. Code is free and available on your favorite platform - Linux, Mac OSX, and Windows.\ncd /tmp\nwget -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'\nsudo apt install ./vscode.deb\nrm -f vscode.deb\nchoco install vscode","install-postgresql#Install PostgreSQL":"PostgreSQL is an object-relational database management system.\nsudo apt-get install -y postgresql postgresql-client\nchoco install postgresql -y --params '/Password:test'","install-dbeaver#Install DBeaver":"DBeaver is free and open source universal database tool for developers and database administrators.\nsudo add-apt-repository ppa:serge-rider/dbeaver-ce -y\nsudo apt-get install dbeaver-ce -y\nchoco install dbeaver -y","install-chromium#Install Chromium":"Chromium is an open-source browser project that aims to build a safer, faster, and more stable way for all Internet users to experience the web\nsudo add-apt-repository ppa:savoury1/chromium -y\nsudo apt-get update\nsudo apt install chromium-browser -y\nchoco install chromium -y"}},"/posts/werfactions":{"title":"Werfactions","data":{"":"В мире современной разработки программного обеспечения процесс интеграции и развертывания нового кода стал намного более сложным и требовательным к автоматизации. Для упрощения этого процесса и обеспечения надежности развертывания, многие команды разработчиков обращаются к Kubernetes. В этой статье мы рассмотрим, почему Kubernetes стал популярным инструментом для развертывания веток и Pull Request'ов разработчиков.","преимущества-kubernetes#Преимущества Kubernetes":"","1-изоляция-с-помощью-namespaces#1. Изоляция с помощью Namespaces":"Kubernetes предоставляет мощный механизм изоляции, который позволяет каждой ветке кода и Pull Request'у работать в собственном изолированном пространстве. Это достигается с помощью концепции Namespaces. Namespaces позволяют разграничить ресурсы, такие как CPU, память, сеть и хранилище, между различными ветками кода и Pull Request'ами. Это обеспечивает высокую степень безопасности и изоляции, предотвращая возможные конфликты и помогая избежать взаимных влияний.","2-горизонтальное-масштабирование#2. Горизонтальное масштабирование":"Одним из ключевых преимуществ Kubernetes является его способность горизонтального масштабирования. Это означает, что вы можете легко управлять различными ветками кода и Pull Request'ами, увеличивая или уменьшая количество ресурсов, выделенных каждому из них, в зависимости от их нагрузки. Это делает Kubernetes идеальным инструментом для работы с разнообразными проектами и командами разработчиков, где требуется гибкость в управлении ресурсами.","3-управление-конфигурациями-с-помощью-helm--werf#3. Управление конфигурациями с помощью Helm / Werf":"Для управления конфигурациями при развертывании веток кода и Pull Request'ов можно использовать Helm - пакетный менеджер для Kubernetes. Helm позволяет создавать чарты, которые определяют, какие ресурсы должны быть созданы и какие параметры конфигурации использовать. Это упрощает процесс развертывания и позволяет быстро вносить изменения в конфигурацию при необходимости.\nОднако работать напрямую с Helm не очень удобно. Для упрощения развертывания мы создали набор шаблонов для Werf и настроили Github Actions для запуска данных процессов.Все наши шаблоны размещены в публичном репозитории https://github.com/iconicompany/werfactions, но если вы хотите их использовать, вам лучше сделать локальный fork.Пример использования в github actions:","выкладка-в-продакшен-из-тэга#Выкладка в продакшен из тэга:":"name: Production Deployment\non:\n  push:\n    tags: ['*']\njobs:\n  call-converge:\n    uses: iconicompany/werfactions/.github/workflows/deployment.yml@main\n    secrets: inherit\n    with:\n      registry: registry.gitlab.com\n      context: production\n      environment: production\n      domain: iconicompany.ru","пример-выкладки-pull-request#Пример выкладки Pull Request":"Выкладка PR происходит в момент добавления метки review в Pull Request, при снятии метки или закрытия PR ресурсы освобождаются\nname: Pull Request Deployment\non: pull_request\njobs:\n  call-converge:\n    uses: iconicompany/werfactions/.github/workflows/deployment.yml@main\n    secrets: inherit\n    with:\n      registry: registry.gitlab.com\n      context: testing\n      environment: ${{ github.head_ref || github.ref_name }}\n      domain: ${{ github.head_ref || github.ref_name }}.${{ github.repository_owner }}.icncd.ru","запуск-авто-тестов-в-библиотеке-playwright#Запуск авто-тестов в библиотеке Playwright":"После развертывания веток кода и Pull Request'ов на кластере Kubernetes, важно удостовериться в их надежности и стабильности. Для этого часто используют автоматизированные тесты, и в этом контексте библиотека Playwright может быть идеальным выбором.","1-установка-playwright#1. Установка Playwright":"Для начала необходимо установить библиотеку Playwright в Kubernetes-кластере. Это можно сделать с помощью Docker-образов, содержащих необходимые зависимости. Образы могут быть созданы с использованием инструментов управления конфигурацией, таких как Helm, для облегчения процесса установки и обновления.","2-настройка-и-запуск-тестов#2. Настройка и запуск тестов":"Playwright предоставляет обширный набор инструментов для автоматизации браузерных тестов. Тесты могут быть настроены для выполнения на каждой ветке кода или Pull Request'е. Например, при создании Pull Request'а, автоматизированные тесты могут быть запущены для проверки, не вызывает ли новый код проблем на уровне пользовательского интерфейса или функциональности.","3-возвращение-результатов#3. Возвращение результатов":"После выполнения авто-тестов, результаты могут быть возвращены в систему управления разработкой, такую как GitHub или GitLab. Это позволяет разработчикам получать быструю обратную связь о качестве своего кода и делать необходимые корректировки до момента слияния изменений.Использование Kubernetes для развертывания веток кода и Pull Request'ов, а также интеграция библиотеки Playwright для авто-тестирования, позволяют значительно упростить и ускорить процесс разработки и развертывания, обеспечивая при этом высокую степень изоляции и безопасности. Эти инструменты способствуют автоматизации и улучшению качества кода, что важно для современных команд разработчиков, стремящихся к более эффективному и надежному процессу разработки ПО."}},"/development/telegram":{"title":"Telegram","data":{"":"Telegram API\nСтатья с Хабра Всё, о чём должен знать разработчик Телеграм-ботов","как-создать-бота-в-telegram#Как создать бота в Telegram":"Написать в поиске «BotFather» (подтвержденный с галочкой) и выбрать;\nНажать кнопку старт (или «/start»);\nПишем ему в чат команду «/newbot»;\nПридумываем имя боту;\nТеперь нужно придумать логин боту (он должен заканчиваться на «bot», например «test2_notify_bot»);\nЕсли логин не занят, который вы ввели, то он выдаст информационное сообщение;\nИз этого сообщения нужно скопировать токен «HTTP API»;\nДалее ищите своего бота по логину и добавляете в группу, чтобы он мог отправлять уведомления.","как-узнать-chatid-группы-telegram-способ-1#Как узнать chatId группы Telegram. Способ 1":"Бот должен быть добавлен в группу;\nПерейти по ссылке - https://api.telegram.org/bot{token}/getUpdates\nНайти в json ответе нужную группу и там будет показан id, это и есть chatId (можно по названию найти по полю «title»). Отрывок:\n\"my_chat_member\": {\n                \"chat\": {\n                    \"id\": -587280491,\n                    \"title\": \"Название группы\",\n                    \"type\": \"group\",  \n  …","как-узнать-chatid-группы-telegram-способ-2#Как узнать chatId группы Telegram. Способ 2":"Если у вас частная группа, то сделайте ее публичной и придумайте ссылку на эту группы;\nПерейти по ссылке - https://api.telegram.org/bot{token}/getChat?chat_id=@{ссылка_группы}\nНайти в json ответе id (это и будет chatId группы);\nМожно сделать группу обратно частной, но теперь вы знаете chatId.","примечание#Примечание:":"Если у вас была частная группа и вы знали chatId, то при переходе на публичную группу chatId измениться.\nЕсли у вас была публичная группа и вы знали chatId, то при переходе на частную chatId не измениться. (и если снова перейти на публичную группу chatId тоже не поменяется)"}},"/":{"title":"Introduction","data":{"":"Welcome to IconicDocs!","нашу-компанию-ценят-за-это#Нашу компанию ценят за это:":"Заинтересованность в новых задачах\nГибкость к запросам бизнеса\nВысокая скорость выполнения за счёт быстрого согласования и принятия решений (не за счёт снижения качества)\nКаждый участник участвует в создании продукта заказчика\nПриверженность команде","таков-путь#Таков путь":"Работа над проектом - командная игра и общая ответственность.\nНам важно доставить качественный продукт заказчику, помочь ему в решении его проблем.\nДоверие - это то, что мы ценим, холим и лелеем.\nЧтобы обсуждать решения по программе и продукту, нужны честность и открытость. Подобные обсуждения проходят регулярно, а идеи и соображения часто озвучиваются. Участники команды должны быть уверены в способности (и желании) каждого действовать с учетом решений, принятых в ходе таких обсуждений.\nЕсли есть вопросы, проблемы, допущены ошибки - команда всегда поддержит и поможет.\nЕсли не можем сами что-то сделать, то ищем того, кто поможет или того, кому можно делегировать.","железные-правила#Железные правила":"Не вкладываем обновления после 16:30 и в пятницу после 14:00.Во всех проектах внимательно следим за доступам к страницам и сервисам, везде должна быть проверка на права доступа.Обращаем внимание на обработку персональных данных (ПД). Утечки ПД недопустимы."}},"/project-catalogue/bystrobank/guidelines":{"title":"Guidelines","data":{"-правила-составления-http-статусов#☑ Правила составления HTTP статусов":"200-308 - для всех случаев неизменны.400-504 - ко всем применяется правило +50Пример:\n200 OK\n400 Bad Request\n450 Bad Request","использование-в-проектах#Использование в проектах":"Правило +50 применяется только к приложениям и сервисам, у которых отстутствует публичное (используемое вне банка) API. При наличии публичного API, конкретно для него правило не используется.Пример:Сервис для распознавания документов - внутренний продукт банка, используется только банковскими сервисами, не предоставляется в пользование сторонним компаниям - правило применятся.Сервис для приёма заявок - к подаче заявок могут подключаться партнёры, используя публичное API - правило не применятся.","-описание-переменных-приложения#☑ Описание переменных приложения":"web.xml - альтернативный способ описания переменных приложения файлу .envДля поддержки получения переменных из web.xml в проекте нужно сделать:","описать-webxml-файл#Описать web.xml файл":"Расположение в проекте: conf/web.xmlСтруктура:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n  <env-entry>\n    <description>Описание переменной</description>\n    <env-entry-name>Название переменной (формата apps.[название приложения].[переменная]</env-entry-name>\n    <env-entry-type>Тип переменной (формата java.lang.[String/Boolean/Number/Integer/Double/Float])</env-entry-type>\n    <env-entry-value>Значение переменной</env-entry-value>\n  </env-entry>\n  <env-entry>\n    <description>Пример - пользователь по-умолчанию</description>\n    <env-entry-name>apps.idocs.default_user</env-entry-name>\n    <env-entry-type>java.lang.String</env-entry-type>\n    <env-entry-value>guest</env-entry-value>\n  </env-entry>\n  <resource-env-ref>\n    <description>Описание переменной</description>\n    <resource-env-ref-name>Название переменной (формата .apps.[название приложения].[переменная]</resource-env-ref-name>\n  </resource-env-ref>\n  <resource-env-ref>\n    <description>Пример - ссылка на базу данных</description>\n    <resource-env-ref-name>.apps.idocs.db</resource-env-ref-name>\n  </resource-env-ref>\n</web-app>\nгде выделяются два типа переменных - env-entry и resource-env-ref.В resource-env-ref выносятся:\nСсылки на ресурсы и приложения банка (в т.ч. базовая ссылка приложения, прокси-серверы, очереди и прочее, что запускается внутри банка);\nСсылки на базы данных приложения.\nВ env-entry выносятся:\nПароли (добавляя суффикс _PASSWORD, apps.idocs.db_PASSWORD) и секреты, без указания значений, значения прописываются во время выкладки;\nВсе оставшиеся переменные.","подключить-библиотеку-для-работы-с-webxml#Подключить библиотеку для работы с web.xml":"Установить библиотеку @ilb/ldapenv\nnpm i -D @ilb/ldapenv\npnpm i -D @ilb/ldapenv\nДля команд в package.json, которым необходимы переменные приложения, нужно добавить перед вызовом ldapenv.\nПример:\n{\n  \"name\": \"idocs\",\n  \"private\": \"true\",\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"dev\": \"next dev\" -> \"dev\": \"ldapenv next dev\"\n  }\n}"}},"/onboarding":{"title":"Онбординг для РАЗРАБОТЧИКА","data":{"":"Добро пожаловать в команду! Мы рады встрече с тобой!","самозанятость-как-стать-самозанятым#Самозанятость. Как стать самозанятым?":"Мы работаем с самозанятыми, поэтому предлагаю ознакомиться со следующими статьями:Кто такой самозанятый?\nКак стать самозанятым?\nСамозанятый через Тинькофф","команда#Команда":"В каждой команде есть Руководитель проектов(РП), Тимлид, Тестировщик и Разработчики.\nРуководитель проектов помогает разобраться в задачах, в организационных вопросах, взаимодействует с заказчиком, ведет документацию и бэклог задач, а так же может подсказать, куда обратиться по другим вопросам, где могут помочь.\nТимлид отвечает за техническую часть, поможет разобраться в вопросах связанных с технологиями и реализацией задач на техническом уровне.\nТестировщик проверяет, как работает задача после того, как она смержена и выложена на тестовый сайт, пишет ошибки и замечания, которые надо исправлять(доработать задачу).","начало-работы#Начало работы":"Узнай, кто твой Руководитель проектов (РП) - тот, кто сможет тебе помочь при затруднениях\nДобавься во все необходимые чаты для проекта, РП поможет с этим.\nЗаристрируйся на сервисе https://clockify.me/\nЗарегистрируйся https://github.com/\nПосле регистрации на сервисах обязательно скажи Руководителю проектов свой email регистрации, чтобы тебя добавили в проект на этих сайтах.\nРегистрация на сайте https://iconicompany.com/\nСозвоны и обсуждения с командой проходят в формате Zoom-встреч."}},"/project-catalogue/bystrobank/stubs":{"title":"Stubs","data":{"написание-заглушек#Написание заглушек":"Заглушки описываются с помощью библиотеки MSW (Mock Service Worker)Для создания заглушки в проекте нужно сделать:","изучить-документацию#Изучить документацию:":"https://mswjs.io/\nhttps://github.com/iconicompany/msw-symlinked","установить-зависимости#Установить зависимости":"npm i msw msw-symlinked\npnpm i msw msw-symlinked","создать-файлы-заглушек#Создать файлы заглушек":"В папке проекта stubs/ создать папку для сервиса, например service1В папке сервиса создать файлы заглушек для всех API, например:\napimethod1.200.json\napimethod2.200.json\napimethod2.202.ASYNC_ACCEPTED.json","описать-файл-обработчиков-заглушек-для-сервиса-srcstubsservice1mjs#Описать файл обработчиков заглушек для сервиса (src/stubs/service1.mjs)":"import path from \"path\";\nimport { rest } from \"msw\";\nimport { stubResponse } from \"msw-symlinked\";\nconst stubPath =  path.resolve(\n  process.env['apps.[appname].stubpath'] + \"/service\"\n);\nexport default [\n  rest.get(RegExp(\"/service(.*)/apimethod1\"), () => stubResponse(`${stubPath}/apimethod1`)),\n  rest.get(RegExp(\"/service(.*)/apimethod2\"), () => stubResponse(`${stubPath}/apimethod2`, {\n    ASYNC_ACCEPTED: [ctx.set('Refresh', '5;http://refresh-url')]\n  }))\n];","описать-файл-инициализации-msw-с-настройками-включениявыключения-srcstubsindexmjs#Описать файл инициализации msw с настройками включения/выключения (src/stubs/index.mjs):":"import service1Handlers from 'service1.mjs';\nconst handlers = [\n  process.env[\"apps.[appname].stub.service1Enabled\"] ? service1Handlers : [],\n].flat();\nconst server = await setupServer(...handlers);\nserver.listen({ onUnhandledRequest: \"bypass\" });","подключить-сервер-msw#Подключить сервер msw":"_app.js\nif (typeof window === 'undefined') {\n  require('../src/stubs')\n}\nИспользовать код из предыдущего пункта напрямую в месте инициализации сервера"}},"/project-managment/NUPP_p3express/NUPP-principles":{"title":"Nupp Principles","data":{"nupp--шесть-почти-универсальных-проектных-принципов-автор--nader-k-rad-помогают-избежать-ошибок-и-держать-фокус-они-менее-жесткие-чем-процессы-и-правила#NUPP — шесть почти универсальных проектных принципов (автор — Nader K. Rad). Помогают избежать ошибок и держать фокус. Они менее жесткие, чем процессы и правила.":"","nup-1-выбирайте-результаты-и-истину-а-не-привязанности#NUP 1. Выбирайте результаты и истину, а не привязанности":"Смотрите на контекст и выбирайте лучшее для проекта, а не свой любимый подход. Диаграмма Ганта, Scrum — только там, где это реально подходит для проекта.\nБудьте открыты и не принимайте критику на свой личный счет. Новые подходы — это не угроза вашей работе.","nup-2-берегите-оптимизируйте-энергию-и-ресурсы#NUP 2. Берегите, оптимизируйте энергию и ресурсы":"Не берите на себя слишком много, вникая во все технические детали и принимая все решения самостоятельно — если сгорите на работе, плохо будет всем.\nПривлекайте к планированию команду, делегируйте тимлидам и оставьте технические детали команде.\nБерегите и тратьте с умом энергию, силы и время. Они вам нужны для верных решений, чтобы помогать команде двигаться вперед.","nup-3-всегда-будьте-проактивны#NUP 3. Всегда будьте проактивны":"Планируйте заранее. В начале каждого цикла детализируйте планы на месяц и прогнозируйте, как ваша работа повлияет на проект в целом.\nЗаранее направляйте всем повестку встречи, информируйте вовремя стейкхолдеров об изменениях в проекте.\nНе тратьте усилия на план только ради планирования. Так вы получите больше ресурсов для текущей работы.","nup-4-прочность-цепи-определяется-по-самому-слабому-звену#NUP 4. Прочность цепи определяется по самому слабому звену":"Фокусируйте внимание на слабых местах, чтобы они не похоронили весь проект.\nНе полируйте до блеска готовую к релизу часть продукта — обратите внимание на те области, где еще ничего не готово.\nНе доводите до совершенства жизнеспособные планы управленческого процесса, если не выстроены коммуникации с командой или заказчиком.","nup-5-не-делайте-ничего-без-четкой-цели#NUP 5. Не делайте ничего без четкой цели":"Не добавляйте функционал без необходимости — по статистике, больше 50% фич не используется.\nВ управлении избегайте действий без необходимости, например, заполнения  десятков шаблонов.","nup-6-используйте-воспроизводимые-элементы#NUP 6. Используйте воспроизводимые элементы":"Создавайте и используйте шаблоны — уже извлеченные уроки и накопленные ранее знания.\nЧек-листы для приемки продукта легче корректировать, чем создавать с нуля.\nЦиклы p3express помогают быть в ритмичности, чтобы не забывать регулярно делать одни и те же управленческие действия, упрощая работу всем."}},"/project-managment/PMBOK6":{"title":"Pmbok6","data":{}},"/project-managment/escalation":{"title":"Про эскалацию в управлении проектами","data":{"":"В мире обычного руководителя проектов эскалация – это «подъем наверх» конфликта или проблемы, которые он не может разрешить самостоятельно  в рамках своей роли или своих полномочий.Простые правила эскалации:✅ Попробовать договориться без эскалации.✅ Если не удалось – честно предупредить, что вы будете вынуждены эскалировать вопрос на такого-то менеджера, потому что интересы проекта и все такое. После этого чудесным образом в половине случаев договориться удается.✅ Продумать (а лучше изложить в письменном виде) внятную аргументацию с позиции влияния поднимаемого вопроса на проект и на его результаты/сроки/бюджет и другие ограничения. При этом важно полностью исключить эмоции и использовать только факты.✅ Включить вторую сторону конфликта в копию в письме или позвать на встречу с руководителем, на которого эскалируется вопрос, чтобы решать вопрос совместно. В случае если вопрос критически важен для проекта – не забыть включить в процесс спонсора проекта, заранее согласовав с ним свою позицию.✅ Получить результат, помня при этом, что отрицательное решение – это тоже результат. И если, например, в ходе эскалации не удалось получить нужный ресурс - это повод отразить данный факт в плане управления рисками и зафиксировать бумажкой (ну или хотя бы письмом), что в итоге влияние на проект такое-то.✅ Продолжать работать в обычном режиме, не делая выводов типа «все они неправы», «менеджер, не давший ресурс – негодяй», «да делайте тогда сами свой проект, кому из нас это вообще надо» и проч. Эскалация – рабочий процесс, в котором нет места личному восприятию. Хотя некоторые поправки в план управления стейкхолдерами после этого можно внести, так как теперь вы лучше представляете их мотивацию, уровень влияния и т д.❌ Часто руководители проектов боятся самого слова «эскалация», потому что русская традиция управления - это в первую очередь превозмогание. И люди искренне считают, что в случае, если они вынесут проблему выше, они продемонстрируют свою некомпетентность, неумение управлять командой и проч. А зря, пока в компании у руководителя проекта не будет 100% влияния и власти (читай - никогда) – ситуации, в которых понадобится эскалации, неизбежны. И лучше сделать это раньше, пока проекту не нанесен совсем уж большой урон."}},"/project-managment/developmentprocess":{"title":"Бизнес-процесс разработки ПО","data":{"":"Более широко данный процесс разработки ПО можно охарактеризовать как механизм\nрешения проблем заказчика и достижения бизнес-целей с использованием цифровых\nпродуктов.Если мы называем процесс разработки ПО «продуктом», мы можем подойти к нему с\nточки зрения управления продуктами — описать проблемы, метрики\nпроцесса, сформировать видение продукта и описать дорожную\nкарту для его достижения.","проблемы-процесса#Проблемы процесса":"Проблемы процесса, причины недостаточной эффективность процесса разработки,\nвозможные решения.\nБесконечный функционал, отсутствие рамок продукта. Программное обеспечение легко написать, но трудно поддерживать. Каждая новая функция, новое требование усложняет систему, удорожает ее поддержку.\nИсполнители не несут ответственности за бизнес-успех продукта. Продукт может не решить проблему заказчика или решить «не ту» проблему.\nПостоянный недостаток ресурсов","видение-продукта#Видение продукта":"Мы задаем конечную цель развития процесса разработки как набор методологий,\nопыта, методик обучения специалистов по разработке цифрового продукта,\nрешающего проблемы клиента.","продуктовые-команды#Продуктовые команды":"Для качественного решения проблем заказчика мы формируем из исполнителей\nпродуктовые команды.\nОбъединение исполнителей - людей, которые производят программный продукт - в продуктовые команды.\nПонимание командой стратегии компании. Сопоставление задач, функционала продукта стратегии компании.\nДелегированная автономность команд. Команда несет ответственность за бизнеса-успех продукта.\nКоманда использует специалистов в качестве экспертов в каждой сфере — финансовой, рыночной, дизайне, объединяют все мнения экспертов в единую картину.\nСамоорганизация. Команда самостоятельно управляет своим бэклогом, сообщая о принятии решений заинтересованным лицам. Все заинтересованные стороны видят, что происходит. Заинтересованные стороны имеют право вето на решения команды.\nСуть предлагаемых изменений довольно сложна. Главным образом она сводится к\nтрансформации исполнителей в людей, которые хотят сделать успех бизнеса частью\nсвоей работы. Людей, которые хотят использовать прагматичные технологии\nпрограммного обеспечения, которые заинтересованы в том, что бизнес и\nпользователи хотят получить от программного обеспечения, которые обеспокоены\nприбыльностью и долгосрочной жизнеспособностью своей компании.","виды-делегированной-автономности#Виды делегированной автономности":"Почему мы до сих пор решаем «не те» проблемы? Почему нужно заменить «ввод в\nэксплуатацию решений» на «достижений целей»? Краткий обзор видов делегации.","делегирование-решений#Делегирование решений":"Предоставляя команде не подлежащее обсуждению, предопределенное решение, мы\nизбавили ее от необходимости действительно углубляться в те бизнес-задачи, над\nкоторыми она работает, или то, что продукт будет решать для клиентов или\nпользователейМы также лишили нашу команду возможности получить общее представление о\nпроблемах. Отсутствие общего понимания открывает двери для предположений и\nпотенциальных недоразумений. И все может пойти неправильно.","делегирование-проблем#Делегирование проблем":"Является делегирование того, что бизнес считает проблемой, лучшим решением? У\nнас есть приложение, продающее кредиты. Бизнес хочет, чтобы команда исправила\nприложение, чтобы оно работало лучше. Но в конечном итоге цель бизнеса —\nувеличить продажи. Но причиной низких продаж могут быть проблемы, лежащие за\nпределами приложения. Реальные проблемы трудно обнаружить без соответствующего\nанализа данных, пользователей, как они пользуются приложением и клиентов,\nпотребляющих наш продукт.","делегирование-целей#Делегирование целей":"То, что заказчик должен делегировать команде — это достижение целей. Мы должны\nсначала потратить время на понимание проблемы (или проблем), стоящих между\nтекущим состоянием и целью. Мы должны подвергать сомнению предположения и\nпредубеждения о способах достижения цели. Мы должны действительно понимать,\nчто нужно пользователям и клиентам, что может полностью отличаться от того,\nчто, по нашему мнению, они хотят или нуждаются. В этом процессе команда может\nпридумать наилучшее возможное решение.Передавая команд цель, и заказчик дает команде возможность провести\nисследование и задать вопросы, которые могут привести к критическому пониманию\nи успеху продукта.Передавая команде цель, и заказчик дает команде пространство для инноваций.","гибридная-структура-управления#Гибридная структура управления":"Существуют две структуры управления: вертикальная и горизонтальная.Сильные горизонтальной структуры:\nАвтономность, быстрое принятие решений\nУстойчивость к уходу члена команды\nСильные вертикальной структуры:\nВидение и долгосрочная стратегия компании\nОптимизация и планирование ресурсов\nГибридная структура управления представляет комбинацию данных подходов\nРуководство компании задает общую стратегию развития продуктов: каким продуктам отдается приоритет в ресурсах\nМенеджеры продукта задают видение и стратегию продукта в соответствии со стратегией компании.","тиражирование-процесса-разработки-по#Тиражирование процесса разработки ПО":"Видение процесса разработки ПО как «тиражируемого продукта» открывает\nвозможности его «независимого» развертывания в «ИТ-компании» или на отдельном\nрабочем месте. Сформулировав комплект методологий, библиотек и примеров\nпрограммных продуктов, введя грейды и процедуры сертификации разработчиков,\nтем самым мы создаем «франшизу» «ИТ компании» или «независимого самозанятого\nразработчика», работающего по единой методологии, разрабатывающего\nслабосвязанные решения, интегрируемые в единые бизнес-процессы.Заказчиками данных решений могут стать участники кредитной платформы, в будщем\nнезависимые юридические лица, так как географических границ по предложению\nцифровых продуктов не существует.Ключевым требованием для такой работы является разработка слабосвязанных\nрешений, работающих в изолированной предметной области, решающих определенный\nкомплекс задач."}},"/project-managment/integration":{"title":"Integration","data":{"управление-интеграцией#⛓Управление интеграцией":"Как вы думаете, какая основная задача руководителя проекта?… прервитесь в этом месте и попробуйте ответить про себя на этот вопрос. Если в голову приходят мысли из серии - объединить все части проекта в единое целое, чтобы достичь основной цели проекта - вы абсолютно правы! 🎆Процессы управления проектами не происходят самостоятельно. Например, для расчета бюджета проекта необходимо составить расписание и оценить риски, а любое новое требование Заказчика может повлиять на качество продукта/ сроки или стоимость проекта. Руководителю проекта необходимо анализировать любое изменение в проекте на предмет влияния на все остальные сферыЧто важно знать и понимать в интеграции:1️⃣ Разработка Устава проекта - самый первый документ проекта. Документ на 2-3 листа А4\n☢️Функции: легитимизировать проект!!!! Определить Заказчика, дать ПОЛНОМОЧИЯ РП, определить цель проекта, связанную со стратегией организации и основную выгоду. Очень важно: любое изменение устава должно ставить под сомнение целесообразность продолжения вашего проекта.\n💡Вариативно: подсветить ВЕРХНЕУРОВНЕВЫЕ оценки сроков, бюджета, рисков2️⃣ Разработка Плана управления проектом - БОЛЬШОЙ документ, в котором должно быть описано: что и как вы будете делать в проекте.\n☢️Функции: определить правила игры в вашем проекте и спланировать все и вся\n💡что пишем в документе: как будем планировать (читай: как будем планировать планирование проекта😂), что будем планировать, с кем, по каким форматам, какой подход (конфигурацию) проекта будем использовать: waterfall или agile, что будем делать потом, ну и собственно планировать каждую область проекта. Это не формальный документ для Заказчика - это ваша собственная «библия» в проекте, которая описывает, как будет происходить проект, с кем и кто чем будет заниматься.3️⃣Руководство и управление работами проекта - наконец-то начинаем руководить 😂\n☢️На самом деле здесь вы и ваша команда начинаете осуществлять все то, что написано в Плане управления проектом.\nОсобое место отводится управлению вашей командой: ваша задача как РП - быть ПОЛЕЗНЫМ для команды, помогать им завершать свои задачи, обеспечивать единое понимание задач проекта между всеми заинтересованными сторонами, ограждать от несвязанных с целями проекта задач.\n🛠Ваши основные инструменты: план-график проекта, перечень изменений в проекте, проведение статусных и рабочих совещаний, система управления проектами (если есть), журнал проблем или открытых вопросов4️⃣ Управление знаниями проекта - это очень тонкий момент, которому, к сожалению, редко отводится должное внимание.\nКонечно, PMBOK нас учит документировать все и вся: каждую запятую, каждые варианты решения проблемы, каждые изменения, которые происходят в проектах - очень часто на это элементарно не хватает времени (попробуйте ка вести хронометраж проектных активностей хотя бы 2-3 месяца…)\n🆘 НО! ключевые решения, в особенности об изменениях содержания, расписания, бюджета, качества должны быть обязательно задокументированы , а иногда еще и утверждены уполномоченными органами в проектах (к примеру, Управляющими комитетами). Не забывайте также фиксировать решения, которые привели к хорошим/ эффективным результатам - это поможет будущим РП или проектам."}},"/project-managment/issue":{"title":"Как работать с задачами","data":{"бэклог#Бэклог":"Первоначально issue формируется в бэклог проекта.\nМы оформляем issue для пользовательской истории (User Story), при обноружении ошибки или бага, для технических задач, для организационных/адмнистративных задач, в общем - для всех возникающих проблем.\nЭто дает нам возможность видеть проблемы в одном месте.\nИз бэклога в работу(в спринт) берем только те issue, у которых есть описание.","постановка-issue-произносится-ишью-переводится-проблема#Постановка issue (произносится: \"ишью\", переводится: \"проблема\")":"Проблема описывается по шаблону.","шаблон-issue#Шаблон issue":"Название\nНазвание должно отражать суть проблемыПроблема\nОпиши в 3-4 предложениях что происходило и почему. Оно должно быть понятно любому члену нашей командыРезультат\nОпиши, что будет сделано в рамках задачи, какой результат ожидается.\nОпиши критерии приёмкиРешение\nНапиши о том, как будет решаться задача.\nИногда удобно разбивать большие issue на мелкие задачи или отслеживать несколько однотипных issues в одноv более крупном issue.\nТОгда добавь в issue список задач, снабжая каждый элемент списка префиксом [ ].\nЭти задачи позже можно будет пребразовать в отдельные issuesКак тестировать\nПриведи список обязательных сценариев для проверки. Положительные и отрицательные. По каждому из них укажи ожидаемый результат.\nПриложи тестовые данные, необходимые доступы, ссылки, если есть.Обратная совместимость\nЗдесь может быть информация или задачи, которые необходимо сделать перед поставкой, например:\nмиграции\nпредварительные оповещениях пользователей о релизе\nоповещение стейкхолдеров об изменениях\nизменения в инструкциях и спецификациях"}},"/project-managment/onboarding_pm":{"title":"Онбординг для Руководителя проектов","data":{"":"Добро пожаловать в команду! Мы рады встрече с тобой!\nРуководитель проектов - интересная и очень важная для команды должность.Как писать эту инструкцию","самозанятость-как-стать-самозанятым#Самозанятость. Как стать самозанятым?":"Мы работаем с самозанятыми, поэтому предлагаю ознакомиться со следующими статьями:Кто такой самозанятый?\nКак стать самозанятым?\nСамозанятый через Тинькофф","начало-работы#Начало работы":"Отвественный за онбординг руководителей проектов: Юлия Зобенко\nПолучи корпоративную почту\nДобавься во все необходимые чаты для проекта, Ответственный поможет с этим.\nЗаристрируйся на сервисе https://clockify.me/\nЗарегистрируйся https://github.com/\nПосле регистрации на сервисах обязательно скажи Ответственному свой email регистрации, чтобы тебя добавили в твой проект на этих сайтах.\nРегистрация на сайте https://iconicompany.com/\nУстанови и настрой zoom/ Созвоны и обсуждения с командой проходят в формате Zoom-встреч.\nСсылка на таблицу с распределением по проектам, ники членов команды в Телеграмм\nПроекты и участники","задачи-pjm#Задачи PjM":"Повышать сфокусированность команды\nНаправлять команду к цели проекта\nГруппу людей трансформировать в команду\nПостоянно анализировать действительность\nОпасность: несданный недострой вызывает негатив заказчика, что затраты есть, а толку нет","рабочие-моменты#Рабочие моменты":"Основная информация по проекту\nШаблон для проекта\nДокументация по проекту должна храниться в проекте в каталоге /docs\nТехническая документация: архитектура, модель данных\nПользовательская документация: инструкции\nЗадачи ведутся в Project\nПрезентация – каждую неделю\nОбщение желательно в общих чатах, чтобы все понимали, что происходит\nКонтролировать в проектах, что нигде нет утечки перс данных: в чатах, на скринах (замазано) или удалять скрины, в логах нет вывода перс данных (на тесте можно смотреть логи), в инфо сообщениях тоже по минимуму.\nЧек-лист приемки ПО(Чек-лист по проектам Якомпания)\nСобытия отмечаем в календаре","обязанности#Обязанности":"Твои обязанности зависят от проекта, участников команды.\nСамое главное: проект идет к своей цели, разработчики не простаивают и получают зп, заказчик доволен и продолжает сотрудничество.Что обычно входит:\nКоординация команды, помощь по организационным вопросам\nOnboarding новых участников команды\nОрганизация встреч с заказчиком (презентации, планирование), командой(планирование, дейли, ретро).\nСогласование с заказчиком спринта, требований, критериев готовности\nФормулирование эпиков, юзер-сторис, технических требований (бизнес-аналитик)\nПланирование спринтов\nКонтроль выполнения задач, статусов, решение проблем в процессе реализации\nОценка рисков\nТестирование (тестировщик)\nМониторинг ошибок и багов, обратная связь от пользователей, первичная поддержка.\nДокументация к проекту\nЗарплата: помощь в заполнении заявок, актов, оплата\nМенеджмент ресурсов: мотивация, время работы, ожидания и тп..","встречи-с-заказчиком#Встречи с заказчиком:":"Проводим в zoom. Необходимо предварительно договориться о встрече с заказчиком.\nЗапись с разрешения заказчика.\nПо итогам предоставляем: MFU (Meeting Follow Up) - договоренности на встрече","onboarding-for-developers#ONBOARDING FOR DEVELOPERS":"Встреча с PM:объяснить роли, познакомить с vision проекта\nОбщая схема работы\nК кому с какими вопросами обращаться, кто наставник\nОплата и оформление документов\nДобавить в чаты, clockify, github","agile#AGILE":"Agile Manifest\nScrum Guide","daily#Daily":"Дейли проводится каждый день. Не для того, чтобы отчитаться, а для того, чтобы:\nвидеть прогресс команды\nпонимать, а успеваем ли мы реализовать цель спринта к дедлайну,\nпонимать, какие изменения реализованы - чтобы протестировать и (возможно) получить уже обратную связь\nпонимать, есть ли пересечения по задачам, вдруг кто-то уже что-то реализовал и можно использовать готовый модуль\nозвучить проблемы, чтобы вовремя отреагировать","полезности#Полезности":"Телеграмм-канал о фасилитации Нестыдная фасилитация\nКто такой PjM и что он должен уметь Пользовательские историиУправленческие инструментыhttps://www.sessionlab.com/methods/team-purpose-culture\nhttps://www.sessionlab.com/methods/team-canvas-session\nhttps://www.sessionlab.com/methods/1-2-4-all"}},"/project-managment/work":{"title":"Как управлять проектом","data":{"функции-руководителя-проекта#Функции руководителя проекта":"Ответственность за результативность и успешность проекта в рамках компании;\nРуководство достижением целей и результатов проекта;\nПланирование и контроль выполнения проекта, выделения ресурсов и соблюдения сроков и бюджета;\nОрганизация обмена необходимой информацией между членами проектной команды и заинтересованными сторонами проекта;\nПостановка задач для участников проектной группы компании;\nРешение проблемных ситуаций и эскалация их на УКП, в случае выхода за пределы полномочий;\nОпределение стратегии реагирования на риски различного характера;\nФормирование отчетности по проекту для Управляющего комитета;\nМониторинг удовлетворенности Заказчика проекта и Ответственного от бизнеса;\nОрганизация взаимодействия и интеграции со смежными проектами компании;\nОрганизация эффективных межпроектных и межструктурных коммуникаций;\nОбеспечение рабочей группы Исполнителя необходимыми в рамках проекта шаблонами корпоративных документов, стандартами и другими нормативными документами Компании.\nАнализ отклонений проекта, формирование запросов на изменение и их эскалация на УКП для принятия решения.","управление-интеграцией#Управление интеграцией":"Для проекта должны быть сформированны документы:\nУстав проекта\nРеестр стейкхолдеров/участников проекта\nПлан проекта\nПлан коммуникаций","управление-коммуникацией#Управление коммуникацией":"","план-коммуникаций#План коммуникаций":"Для проекта необходимо определить план коммуникаций. Это списков встреч, их описание, частотность, продолжительность, ответственный и тд.\nШаблон - лист План коммуникаций в шаблоне проекта.","организация-совещаний-митинговпрезентаций-и-тп#Организация совещаний (митингов/презентаций и тп)":"Встречи заносим в производственный календарь.\nНапоминаем о встрече в день встречи минимум за 1 час! Ссылку на встречу отправляем заранее: при напоминании или за 5-15 минут перед встречей (написать, \"встречаемся в 14:00\" или \"вcтречаемся через 15 минут\")\nАгенда/Повестка\nПеред встречей формируем повестку\nОтправляем email/сообщение в чат в таком формате:\nНазвание проекта:_Название встречи_Тема/цель встречи\nКогда: дата и время проведения\nГде: место проведения встречи, например: zoom и ссылка на конференцию\nТайминг: продолжительность\nПовестка: список вопросов\nФасилитация встречи\nОсновные моменты:\nНе опаздываем\nОткрытие встречи:\nПриветствие.\nПредставляем участников (если не знакомы или есть новые участники).\nОзвучиваем тему встречи (или цель).\nОзвучиваем повестку.\nОзвучиваем тайминг.\nПереходим к рассмотрению пунктов повестки\nВ процессе встречи записываем поручения и решения (их нужно будет занести в реестр поручений и отразить в протоколе совещаний)\nСледим за временем. Стараемся уложиться в тайминг.\nЗакрытие встречи:\nозвучиваем принятые решения / поручения, получаем подтверждение, что всё ок\nдоговариваемся о след встрече (при необходимости)\nсообщаем, что отправим протокол совещания\nблагодарим за уделенное время.\nПротокол совещания/Meeting Mемо/Meeting Follow Up\nПосле встречи необходимо сформировать протокол совещания/мемо/Meeting Follow Up\nНазвание разные, но суть одна: что, где, когда, что рассматривали, какие поручения/задачи определили и кто ответственный.\nОтправить письмо с протоколом всем участникам встречи в день встречи!\nФормальный текст письма:\nКоллеги, добрый день! Направляю протокол совещания по обсуждению тема обсуждения, прошу вас ознакомиться, согласовать в случае отсутствия замечаний или направить дополнения в срок до 22.08.22 18:00. При отсутствии замечаний протокол будет считаться согласованным.\nНеформальный текст письма:\nПривет! Вот список решений, которые были приняты на встрече. Посмотрите, пожалуйста, всё ли верно. Если замечаний нет, то берем в работу.\nКакой срок согласования лучше указывать? если совещание было в первой половине дня, то до конца рабочего дня; если совещание было во второй половине дня, то до конца рабочего дня или до обеда следующего рабочего дня (смотря какой объём)."}},"/development/guidelines/dod":{"title":"Требования к коду","data":{"dod-definition-of-done#DoD (Definition of Done)":"Критерии готовности - проверяются по каждой задаче командой до релиза\nСтатья о DoD\nКод хорошо написан. То есть команда не чувствует необходимости немедленно проводить рефакторинг или переписывать его.\nКод отформатирован по eslint\nК коду написаны комментарии (ответственность модуля, основные моменты логики)\nВ логах нет вывода перс данных (и вообще нет лишних console.log)\nКод поставляется с автоматическими тестами на всех соответствующих уровнях.\nКод работает в seamonkey 2.35 - только для проектов БыстроБанка\nКод проверен, прошел автотесты.\nКод-ревью выполнен\nНеобходимые переменные окружения добавлены в web.xml, .env.example\nНа внешние сервисы есть заглушки или api-тестовая среда\nОбновления метаданных базы данных оформлены в миграции\nРучное тестирование прошло успешно\nПроверка на уязвимости прошла успешно\nРеализованная функция была описана в документации для конечного пользователя.\nПри релизе в package.json обновлена версия приложения","именования-переменных#Именования переменных":"Называть в соответствии с содержимым\nДля полей модели используется camelCase","обратить-внимание#Обратить внимание":"Вместо +params.value лучше явное преобразование parseInt(params.value)Не использовать var, let","особенности-вычислений-с-плавающей-точкой#Особенности вычислений с плавающей точкой":"2.51 + .01;                   // => 2.5199999999999996\ncurrency(2.51).add(.01);      // => 2.52\nиспользуйте\nimport currency from 'currency.js';\ncurrency(7.89).add(c1).add(c2); // => \"13.68\"\nиначе вылазят такие казусы\nНазначение платежа: Пополнение лицевого счета 116 НДС не облагается. Остаток на счете: 3386 руб.\nРекомендуемая сумма пополнения: 139042.83000000002 руб","отладка-и-логирование#Отладка и логирование":"В логах не допускается вывод персональных данных клиентов (даже в режиме debug)\nДля отладки использовать debug вместо console.log();\nimport createDebug from 'debug';\nconst debug = createDebug('icompany-XXX');\nв коде\ndebug(....);\nПример: https://github.com/iconicompany/icompany/blob/master/src/Application.mjsтогда можно на сервере включать и выключать\nDEBUG=icompany-*\nDEBUG=icompany-messages","отправка-сообщений-об-ошибках-на-почту#Отправка сообщений об ошибках на почту":"Повесить errormailer на обработчик ошибокв /libs/middlewares/index.mjs\nimport { notify } from '@ilb/mailer/src/errormailer';\nexport const onError = (err, req, res) => {\n...\nnotify(err).catch(console.log);\n...\n}\nИ админам прописать SERVER_ADMIN с почтами в .pm2/processes.json:\nзакомментировать в .env:\n#apps.strizhinvest.server_admin  \nдобавить или изменить запись в processes.json:\n\"env\":  \n\"SERVER_ADMIN\": \"\""}},"/project-managment/productmanagement":{"title":"Управление продуктами","data":{"с-чего-начинается-продукт#С чего начинается продукт":"Создание продукта должно идти от простого к сложному. Поэтому отчасти аджайл\nстал так популярен. Вы не можете сразу спроектировать сложную систему, потому\nчто такая попытка обречена на провал. Аджайл это путь мелких провалов, когда\nвы пробуете что-то и учитесь. Каждый новый проект или «фичу» вы делаете чуть\nлучше чем предыдущий, просто потому что вы уже совершили сотни ошибок.Так с чего начинается продукт? С идеи? Нет. Продукт начинается с проблемы.Вы должны чётко понимать проблему, которую хотите решить. Потому что вы\nнанимаете «цифровой продукт» для решения проблем.Есть проблемы бизнеса, есть проблемы пользователей. И именно проблемы,\nрасположенные в таком порядке, определяют дизайн продукта.Сформулировав проблемы, вы создаете краткое описание проекта, с которым должны\nознакомиться все заинтересованные лица (люди, принимающие финансовые риски\nпроекта).В кратком описании проекта вы должны описать то, для чего проект вообще нужно\nсоздавать: какие проблемы он должен решить, и какие бизнес-цели ставятся перед\nпроектом, какие меры для этого следует предпринять, то есть стратегию\nпродукта.","этапы-разработки-продукта#Этапы разработки продукта":"Исследование проблемы\n1. Изучение бизнес-модели клиента\n2. Определение чего «клиент» хочет достигнуть - каких финансовых показателей. \n3. Определение того, что мешает ему достигнуть этих показателей сейчас? Какие болевые точки есть в процессе?\n4. Выработка решения, которое может устранить эти проблемы с учетом ограничений — сроков, бюджета _клиента_\n2. Реализация решения\n1. Разработка продукта — сайта или приложения.\n2. Запуск продукта\nТо есть, клиент приходит с неоформленной идей и на выходе получает\nитеративно\nОпределение проблемы, краткое описание решения (результат исследовательской фазы)\nГотовое решение — результат разработки и запуска решения.","исследование-проблемы#Исследование проблемы":"","изучение-бизнес-модели#Изучение бизнес-модели":"Целью деятельности коммерческой организации — делать деньги. То, как\nорганизация зарабатывает деньги показывает ее денежный поток. Поэтому изучение\nденежного потока является критически важным этапом исследования. Без понимания\nтого, что и почему приносит фирме деньги, не возможна эффективная разработка\nпрограммных продуктов и разработка стратегий и инициатив.Итогом данного исследования этапа является модель денежного потока\nорганизации. Модель денежного потока может дать экономист, отвечающий за\nфинансовые результаты. Модель денежного потока даст ответы на то, что и почему\nприносит прибыль организации. Лучше, если это будет «вариативная» модель в\nтабличном процессоре, куда вы сможете подставлять различные входные значения,\nмоделируя различные результаты.","определение-чего-клиент-хочет-достигнуть#Определение чего «клиент» хочет достигнуть":"Следующим этапом после получения модели денежного потока является\nформулирование метрик. Вы должны понимать, какие финансовые показатели имеют\nзначения для клиента. Как правило, ключевой метрикой денежного потока является\nЧистая приведенная стоимость (NPV). Данный показатель учитывает временную\nстоимость денег и показывает объем валовой прибыли, приведенный к сегодняшнему\nдню. Метрики не обязательно могут быть привязаны к денежному потоку. В\nдеятельности различных подразделений бизнеса могут быть иные метрики — уровень\nотклика в деятельности контакт-центра, уровень просрочки и т. д. Все они в\nитоге влияют на итоговый денежный поток, но могут быть промоделированы\nнезависимо для последующего включения в общую картину.","определение-того-что-мешает-росту-показателей#Определение того, что мешает росту показателей":"От формулирования метрик мы переходим к формулированию гипотез относительно\nтого, что является узким местом в денежном потоке клиента. Понимание узких\nмест клиента критически важно для формулирования гипотез.Для первичного определения узких мест вы можете запросить качественный опрос\n«менеджеров» фирмы. Менеджеры фирмы могут иметь собственные гипотезы\nотносительно узких мест в продажах или обслуживании. Это могут быть сведения о\nопределенных сегментах клиентов, вызывающие опасения, существенные проблемы\nобслуживания и т. д.После первичной диагностики проблем мы переходим к статистической проверке\nгипотез. Данный этап выполняется аналитиками данных, в ходе которого строятся\nлинейные регрессии, проводится оценка статистической значимости факторов и\nприменяются иные «продвинутые» методы исследования.","пример-исследования-проблемы#Пример исследования проблемы":"Данный пример демонстрирует совместную деятельность команды по диагностике и\nрешению экономических проблемРоли:PO - Владелец продуктаPM - Менеджер продуктаDS - Аналитик данныхEC - Экономист\nPO: Сегмент таксистов не рентабельный. Как нам решить эту проблему? Если мы не найдем решение, мы будем вынуждены прекратить кредитование данного сегмента та.\nPM: Давайте проверим эту гипотезу. Для начала мы должны удостовериться, что дефолтность таксистов отличается от аналогичной выборки клиентов не-таксистов.\nDS: (жонглирует цифрами) Нам нужна репрезентативная выборка из допустим...N клиентов.\nPM: К сожалению, нас нет признака \"таксист\" в данных. Могут ли менеджеры заполнить данный признак ретроспективно по предоставленной выборке?\nPO: Думаю это возможно. Должны ли менеджеры фиксировать собственное суждение или лучше воспользоваться сервисом X и Y для определения сегмента таксист?\nPM: Лучше заполнить все варианты, чтобы определить статистическую значимость различных вариантов идентификации\nСпустя некоторое время\nDS: На выборке размером N все факты больше похожи на шум. Можем ли вы увеличить выборку до размера M?\nPO: Да, менедежры могут заполнить и такую выборку.\nСпустя еще некоторое время\nDS: Мы сформировали 2 бизнес-правила, позволяющие уменьшить просрочку по сегменту таксист (перечисляет условия)\nPM: Как мы можем выбрать из двух правил лучшее?\nEC: Я построил денежные потоки с учетом правила А и Б. При ставке дисконтирования Z правило А экономит X млн рублей по ретро-расчетам.\nPM: Применяем бизнес-правило A и открываем кредитования сегмента таксисты?\nPO: Согласовано.\nВ данном примере, менеджер продукта формулирует нулевую\nгипотезу о том, исходная\nпредпосылка (дефолность таксистов выше по сравнению с аналогичной выборкой не\nтаксистов) не верна и использует статистический аппарат для ее опровержения на\nфактических данных. Если нулевую гипотезу не удается опровергнуть\nстатистически, она считается верной и проблема не требует «решения». Если\nподозрения не исчерпываются проведенным анализом, возможно следует взглянуть\nна проблему под другим углом, поискать иные данные.Для проверки гипотезы о равенстве долей «просрочников» в двух совокупностях\n(таксисты и не таксисты) аналитик данных (DS) использовал z-критерий. См.\nРаздел «Параметрические критерии» в книге «Статобработка экспериментальных\nданных в MS Excel» (Томск, 2018).Здесь мы проводим аналогию с методиками «доказательной медицины», где данный\nподход используется повсеместно. В приведенном примере, в виду опровержения\nнулевой гипотезы и необходимости выбора из двух конкурирующих решений,\nменеджер продукта переходит к задаче поиска решения с учетом максимизации\nэффекта на денежный поток.Разумеется, ретро-тест, приведенный в данном примере имеет некоторые\nограничения, и может не учитывать существую структуру продаж.В некоторых случаях, когда эффект принимаемых решений можно оценить в\nперспективе нескольких месяцев, можно использовать разные конкурирующие\nстратегии, для того чтобы оценить финансовые результаты по текущей структуре\nпродаж и таким образом определить наилучшую стратегию.","выработка-решения-которое-может-устранить-эти-проблемы-с-учетом#Выработка решения, которое может устранить эти проблемы с учетом":"ограничений — сроков, бюджета клиента","разработка-бизнес-правил#Разработка бизнес-правил":"Одним из наиболее простых вариантов решения является доработка бизнес-правил\n(правил, зарабатывающих или экономящих бизнесу деньги). Однако за видимой\nпростотой бизнес-правила могут крыться сложности получения данных для его\nприменения.Например, итогом построения линейной регрессии может стать понимание того, как\nвариационные параметры сделки (или иной сущности моделирования) влияют на\nитоговые показатели бизнеса.Данные исследования могут послужить основой для формулирования стратегий\nпродаж (коммуникаций, проверок и иных видов исследуемых действий),\nэффективность которых также должна подтверждаться статистическими тестами\n(например, z-тест)Таким образом, основываясь на знаниях денежного потока клиента, знаниях\nвариационных параметров, влияющих на итоговые результаты, на выходе вы\nформулируете набор стратегий, эффективность — статистическую и практическую\nзначимость которых вам предстоит подтвердить ретро-тестами и практически.","разработка-бизнес-процесса#Разработка бизнес-процесса":"Как правило, разработка новых решений - это не разработка всего бизнес-\nпроцесса заново. За одну итерацию можно изменить лишь небольшую часть бизнес-\nпроцесса. Поэтому вы начинаете с описания существующего бизнес-процесса,\nиспользуя методики пользовательских историй или нотацию бизнес-процессов, что\nпо большому счету одно и то же. И там и там вы описываете «этапы» и\nпоследовательность выполнения работ, просто называете это историями или\nактивностями.Именуя активности, вы должны придерживаться стиля CTA (Call-to-action). Именно\nэто название пользователь увидит у себя в рабочем листе или оповещении. Это\nможет быть задача «Загрузить ПТС» (где пользователь видит элемент управления\nдля загрузки и просмотра файла), «Подписать договор» и т.д.Следующим этапом после описания процесса является определение места «врезки»\nнового продукта. Вы меняете наиболее существенную часть, «MVP продукта» —\nминимальную часть процесса, которую можно запустить, чтобы получить обратную\nсвязь от пользователей процесса или экономический эффект.Каждой активности процесса соответствует некоторый интерфейс, или сервис. Вы\nне должны беспокоиться о том, где и как это будет реализовано, сейчас это не\nважно. Ваш процесс будет разбит на изолированные предметные области\nинженерами.Для того, чтобы они могли это сделать, вы должны описать действия с точки\nзрения пользователя. Это можно сделать:\nЧерновиками интерфейсов и прототипированием совместно с фронт-разработчиком, например в https://uniforms.tools/\nНаписанием критериев приемки.","стратегия-продукта#Стратегия продукта":"Ядро стратегии (см. книгу «Хорошая стратегия, плохая\nстратегия»)\nсостоит из 3 ключевых пунктов:1. Постановка диагноза, определяющего либо объясняющего природу проблемы.При помощи исследований пользователей и анализа данных вы распознаете те\nаспекты ситуации, которые критически важны для решения задачи, что во много\nраз упрощает невероятно сложную реальность.2. Направляющая политика для решения проблемОбщий подход, выбранный для преодоления препятствий, выявленных в процессе\nдиагностики. Должен описывать общие детали реализации продукта.3. Согласованные меры, необходимые для реализации направляющей политики.Дорожная карта, последовательное выполнение которой приводит к результату.","mvp-продукта#MVP продукта":"Жизненный цикл продукта, согласно Хенрику\nКнибергу:\nСамый ранний продукт, доступный для тестирования\nСамый ранний продукт, который можно использовать\nСамый ранний продукт, который нравится пользователям\nПодход MVP - это подход, основанный на гипотезах . Вместо того, чтобы думать о\nсвоем MVP как о продукте, лучше думать об этом как о обучающем упражнении. У\nвас есть гипотеза, и ваш MVP (самый ранний тестируемый продукт) - это один из\nспособов (но не единственный) проверить эту гипотезу.Создание MVP — не единственный способ проверки гипотезы. Иногда может быть\nдостаточно визуального прототипа.Одной из ошибок, допускаемых при создании продукта, является создание\nпродуктов и услуг на основе прототипа.Как напомнил нам Фредерик Брукс-младший более 35 лет назад в своей\nосновополагающей книге «Мифический человеко-месяц»:\n«В большинстве проектов первая построенная система практически не\nиспользуется. Она может быть слишком медленной, слишком большой, неудобной в\nиспользовании или всеми тремя. Нет альтернативы, кроме как начать сначала,\nумнее, но умнее, создать переработанную версию, в которой эти проблемы\nрешены. Утилизация и переделка могут быть выполнены за один раз или по\nчастям. Но опыт работы с большими системами показывает, что это будет\nсделано. Когда используется новая концепция системы или новая технология,\nнужно построить систему, которую можно выбросить, потому что даже самое\nлучшее планирование не настолько всесторонне, чтобы сделать все правильно с\nпервого раза».\nЭто так же верно сейчас, как и тогда, когда Фредерик впервые написал это в\n1970-х годах. Подобно строительству дома на песке, создание продукта на основе\nMVP, скрепленного веревкой, липкой лентой и достаточным объемом технического\nдолга, чтобы потопить Титаник, никогда не является хорошей идеей. Относитесь к\nсвоему MVP как к учебному упражнению и откажитесь от кода, как только вы\nузнаете достаточно, чтобы двигаться дальше.","проектирование-основанное-на-гипотезах#Проектирование, основанное на гипотезах":"Гипотеза - это в основном предположение. То, что кто-то считает правдой.\nГипотеза помогает вам подтвердить или опровергнуть предположение. Они либо\nдоказаны, либо опровергнуты исследованиями и экспериментами.Результаты этих экспериментов говорят вам, действительно ли вы понимаете\nповедение своего пользователя и насколько точно вы понимаете потенциал или\nподводные камни своей концепции.Каждая проверенная гипотеза может дать новое понимание для будущих этапов\nразработки вашего продукта. Вот почему мы считаем, что их формирование на\nоснове исследований и доказательств имеет основополагающее значение для\nдизайна продукта, ориентированного на клиента.Цель проверки гипотез — верификация любых, даже труднодостижимых решений, на\nкоторые невозможно положиться сразу.Достоинства проектирования на основе гипотез:\nПолучить поддержку команды\nКаждый может участвовать в написании гипотез, поэтому каждый чувствует\nответственность и вовлеченность. Это означает, что идеи не нужно «продавать»\nили «оправдывать» в дальнейшем, поскольку все настроены на одну и ту же\nволну.\nМеньше бумажной работы\nПоскольку вы обсуждаете гипотезы вместе, вам нужно будет создавать меньше\nдокументации.\nПриоритетная дорожная карта\nПроектирование, основанное на гипотезах, означает, что ваша дорожная карта\nбудет сформирована на основе доказательств.\nПостоянное обучение\nДаже после того, как была выпущена новая функция, вы можете использовать\nсвои предположения для дальнейшего исследования и открытия новых идей. Легко\nнайти проблемы с дизайном, которые было бы трудно обнаружить одним только\n«дизайнерским глазом».\nФункции, которые нужны пользователю.\nПроектирование , основанное на гипотезах, означает, что пользователи получают\nфункции, которые соответствуют назначению и решают реальные потребности.","написание-проектной-гипотезы#Написание проектной гипотезы":"Для написание проектной гипотезы вы начинаете с простого утверждения и\nпомещаете его в структуру, например в такую:В первой части гипотезы « Мы считаем, что …» вы делаете обоснованное\nпредположение о поведении пользователя.Следующая часть « Итак, если мы …» - это действие, то, что мы хотим, чтобы\nпользователь сделал или думаем, что пользователь собирается сделать.« Тогда мы увидим …» - вот где указывается ваш ожидаемый результат или мера\nуспеха.","тестирование-гипотезы#Тестирование гипотезы":"Далее следует выбрать наиболее подходящий тест для вашей гипотезы.\nМост Миллениум в Лондоне был первоначально открыт в 2000 году, и за один\nдень по нему пересекли 90 000 человек, причем 2000 человек переходили по\nнему одновременно.\nПо мере того, как все больше людей переходили мост, он начал резко\nраскачиваться. Это движение стало хуже, поскольку все начали дружно\nпротивостоять направлению колебания. Это та же самая наука, по которой\nсолдаты ломают ступеньку при переходе моста (см. Бротонский подвесной мост\n).\nПозже выяснилось, что инженеры, стоящие за проектированием моста Миллениум,\nпредставили и испытали только 160 человек, идущих по нему в любой момент\nвремени.\nЭто отличный пример того, когда установка правильных критериев тестирования и\nпроведение соответствующих экспериментов для вашей гипотезы так важны и в\nконечном итоге могут стоить вам больших денег (исправление этого стоит еще 5\nмиллионов фунтов стерлингов), если все сделано неправильно.","количественные-и-качественные-критерии#Количественные и качественные критерии":"Первый важный шаг - решить, какой тип обратной связи вам нужен, чтобы\nподтвердить или опровергнуть вашу гипотезу.Если вы тестируете новую концепцию и ваша мера успеха связана с реакцией\nлюдей , вы можете провести качественное исследование. Количественные методы\nисследования идеально подходят, если вам нужна обратная связь, связанная с\nизмеримыми результатами, например, если ваша гипотеза связана с процессом\nрегистрации или воронкой продаж.","приоритизация-задач#Приоритизация задач":"Для приоритизации задач / бэклога продукта следует понимать проблемы, решаемые\nзадачей и желаемые цели.Решаемые проблемы должны соответствовать текущей стратегии компании.Любая проблема имеет две характеристики\nВероятность/частота возникновения\nСтепень воздействия / масштаб последствий (с учетом обратимости)\nВ зависимости от данных характеристик, проблема может требовать различного\nуровня проработки.Частая проблема, приводящая к необратимым последствиям требует повышенного\nанализа.Редкая или обратимая проблема требует меньшего времени для анализа и\nпроработки.Есть всего несколько целей бизнеса верхнего уровня, и они не меняются,\nменяются только инструменты:\nУвеличение прибыли/рентабельности\nСнижение рисков\nУвеличение продаж/конверсии\nСнижение расходов/кол-ва человек/времени\nДля приоритизации задач может быть полезным размещение их виде матрицы (см.\nкнигу Intercom on Product\nManagement)Высокая стоимостьНизкая ценность(крупные внутренние доработки)|Высокая стоимостьВысокая ценность(обычные элементы дорожной карты)---|---Низкая стоимостьНизкая ценность(небольшие внутренние доработки)|Низкая стоимостьВысокая ценность(quick wins)","задачи-пользователей#Задачи пользователей":"В фазе исследования продукта важную часть занимает исследование пользователей.\nДля того, чтобы определить рамки продукта, может быть полезным описать текущий\nбизнес-процесс в виде последовательности шагов или JTDB. Однако то, как\nпользователи выполняют задачи в текущем процессе не означает того, что ваш\nпродукт должен механически позволять делать то же самое. Назначение процесса\nописания задач — понять цель выполняемых задач и найти болевые точки процесса\nс точки зрения пользователя.Работа продукта начинается с того момента, когда действие пользователя\nпереходит в его предметную область.Продукт, который вы создаете, решает проблему пользователя — «выполняет\nработу». Бизнес или пользователи покупают, то есть «нанимают на работу» ваш\nпродукт, чтобы он сделал свою работу.Начинающий менеджер продукта может задать вопрос: что первично — требования\nбизнеса к продукту или цели бизнеса? Цели первичны, они не меняются от\nпродукта к продукту - это увеличение прибыли, снижение риска и т. д. Бизнес\nпокупает не \"выполненные требования\", а достигнутые цели. Если требования\nбизнеса не ведут к достижению целей или ведут не эффективно, этот вопрос\nдолжен решаться в форме диалога.","job-to-be-done#Job To Be Done":"Не достаточно провести опрос пользователей о выполняемых им работах и дать им\nинструмент для выполнения работ. Менеджер продукта должен дойти до\nпервопричины выполняемых работ. Одним из инструментов фиксирования причин\nвыполняемых работ является Job To Be Done.Суть подхода JTBD: Фокусироваться на том, чего стремится достичь бизнес или\nпользователь в определенных обстоятельствах. Это и называется job to be done —\n«работа, которую надо выполнить».Job To Be Done = задача + контекст.Контекст задачи важен потому, что сама по себе задача пользователя не имеет\nценности. Задача приобретает ценность, когда мы ее выполняем для достижения\nпрогресса в определенной ситуации.","интервью-пользователей#Интервью пользователей":"Для получения перечня задач пользователей следует задавать направляющие\nвопросы.Интервью может быть организовано кем угодно в команде (менеджером продукта,\nразработчиком, QA-инженером). Обратная связь пользователя, приводящая к\nизменениям в продукте, должна валидироваться на данных для того, чтобы\nпонимать масштабность проблемы.","что-вы-хотите-сделать#Что вы хотите сделать?":"Ваша первоочередная задача — понять, чего хочет достичь пользователь своими\nдействиями. Вы должны задать вопрос почему столько раз, сколько это требуется\nдля того, чтобы понять первопричину проблемы (см. технику «Пять\nпочему»).","как-вы-в-настоящее-время-делаете-это#Как вы в настоящее время делаете это?":"Вы должны проанализировать рабочий процесс, в каком контексте выполняется\nоперация, масштаб проблемы. Если вы хотите сделать «ремонт» в отдельном\nбизнес-процессе, вы должны понимать, это косметический ремонт или перестройка\nвсего процесса. Для разного масштаба действий требуются разные подходы,\nинструменты и средства. Вы можете избавить команду инженеров от работы с\nнизкоценными процессами с помощью организационного изменения процесса или\nподхода.","как-можно-улучшить-то-что-вы-делаете#Как можно улучшить то, что вы делаете?":"Этот вопрос побуждает пользователя дать вам некоторые идеи о том, какие\nобласти нуждаются в наибольшей помощи.Этот вопрос также может помочь вам получить информацию вас о прототипе,\nкоторый вы можете создать, чтобы проверить, можете ли вы решить проблему.Вы не должны создавать именно то, что говорят пользователи. Протестируйте\nпрототипы, чтобы увидеть, в конечном итоге ваши проекты решают их проблему. Не\nпросто делать то, что люди хотят.","сущности-и-их-поведение#Сущности и их поведение":"От понимания проблемы и задач пользователя, проектирование продукта ведет вас\nк формулированию сущностей предметной области и их поведению.Основа создания продукта лежит в моделировании сущностей реального мира.\nПоэтому понимание предметной области — ключевой навык менеджера продукта.Описание сущностей - объектов реального мира — требует, чтобы эти объекты\nсодержали всю бизнес логику в себе и строились исходя из того какую\nответственность объекты имеют и как они взаимодействуют с другими объектами.Модель — это информационный аналог объекта. Создавая модель, вы описываете\nсущности, их атрибутный состав и поведение. Описание всегда идёт от крупного\nплана к мелкому. Описывая сущности, вы постоянно смещаете фокус от общего\nплана до конкретных атрибутов и деталей поведения.см. профильный раздел «Предметно-ориентированное\nпрограммирование»","состав-сущностей#Состав сущностей":"При описании сущности прежде всего нужно обозначить ее — дать ей имя. Далее мы\nдолжны описать характеристики и возможности сущности.В описании сущности следует приводить не все ее свойства, а только\nсущественные в данной ситуации. Описывая состав сущности, мы мысленно\n«разбираем» ее на части. При этом, как правило, используется такой приём:\nсначала называется небольшое число крупных частей, затем каждая из них\n«разбирается» на части поменьше и так далее.","состояние-сущности#Состояние сущности":"Под состоянием сущности мы подразумеваем определённое сочетание всех или\nнекоторых характеристик этой сущности. Среди всех возможных состояний сущности\nобычно выделяется такие, при достижении которых ее свойства меняются особенно\nсущественно, так, что либо вообще становятся недоступны некоторые из его\nдействий, либо они выполняются другим способом. Например, колесо может быть в\nсостоянии «Накачано», «Лопнуло», корзина продуктов может быть в состоянии\n«Создана», «Рассчитана», «Продана».","поведение-сущностей#Поведение сущностей":"Имена действий означают процессы, которые могут происходить с сущностью, и\nотвечают на вопросы «что она может делать?» или «что с ней можно делать?».\nНапример, автомобиль можно завести или остановить. Корзину продуктов можно\nсоздать, распечатать заявку на кредит, выдать кредит.","отношения#Отношения":"Кроме свойств конкретной сущности, следует описать и отношения между\nсущностями.Существует два основных вида отношений:\nгенерализация (наследование), когда мы говорим, что одна сущность является надможеством другой сущности: «Евразия — это материк», или «Магазин — это Точка продаж».\nсоотношение множеств, когда мы говорим «колёса входят в состав автомобиля» или «Оферта входит в состав Корзины». В таких отношениях мы должны указать вид связи: 1:1, 1:M или M:1.","игра-сущности-и-поведение#Игра «Сущности и поведение»":"Лучше всего материал данной главы усваивается в виде игры «Сущности и\nповедение». Суть игры заключается в следующем:\nВедущий называет каждому участнику по очереди сущность.\nУчастник называет несколько поведений данной сущности, например «Светофор»: может переключаться сам по программе, можно включить кнопкой зеленый свет вручную\nУчастник называет приемочный критерий для одного из видов поведений. Например, по шаблону «предусловие», «действия», «результат»: горит красные сигнал пешеходного светофора, пользователь нажимает кнопку на столбе, через 20 секунд зажигается зеленый сигнал светофора для пешеходов.\nДля изучения отношений сущностей можно полезно задания участникам из одной\nобщей сущности, например первый участник называет поведение сущности\n«автомобиль», остальные участники называют поведение вложенных сущностей\n«дверь», «колесо», «двигатель» и т. д.Для понимания отношения «генерализация» следует обыграть пример, когда у\nнескольких сущностей появляется одно и то же поведение. Наличие общего\nповедения может быть причиной выделения общей, генеральной сущности. Например,\nв ходе игры с предметами окружающего мира, участники выяснили, что «завести»\nможно грузовой, легковой автомобиль или автобус. В зависимости от целей и\nусловий моделирования, данный факт может послужить причиной выделения базовой\nсущности «Транспортное средство», обладающей поведением «Завести»","моделирование#Моделирование":"Моделирование - это:\nпостроение моделей реально существующих объектов (предметов, явлений, процессов)\nзамена реального объекта его подходящей копией, исследование объектов познания на их моделях\nМетодики моделирования\nМысленный эксперимент - «разыгрывание» ситуации в воображении, основываясь на реальных сценариях поведения пользователя или клиента.\nСистемное мышление - возможность обобщать и распространять свой опыт, полученный в одной области, на окружающий мир.\nСценарный анализ — способность рассматривать альтернативные варианты развития событий, сравнивая их результаты.\nАнализ чувствительности - оценке влияния изменения исходных параметров проекта на его конечные характеристики, в качестве которых, обычно, используется внутренняя норма прибыли или NPV\nСимуляция - имитация процесса, например на ретро-данных поведения, характеристик клиентов, данных ранее заключенных сделок и т. д.","анализ-данных#Анализ данных":"Количественный анализ необходим как для принятия решения, так и для построения\nматематических моделей.","методы-анализа-данных#Методы анализа данных":"SQL. Самый простой доступный способ, позволяющий получить ответы на многие вопросы: сколько сделок совершается с дифференцированным графиком платежей? Какое среднее значение или медиана годовой ставки в разрезе X, Y, Z?\nЛинейная регрессия. Позволяет не только построить модель результирующей переменной, но и оценить степень влияния переменных по коэффициентам. Для построения простой линейной регрессии можно использовать web-интерфейс H2O.\nДанные виды анализа позволяют провести раннюю диагностику проблемы, без\nобращения к профильным специалистам — аналитикам\nданных. Они являются аналогом\nстетоскопа в больнице. Не всегда\nтребуется МРТ и дорогостоящие виды анализа. Анализ всегда начинается с самых\nпростых и доступных средств.","метрики#Метрики":"Для управления продуктом на основе данных мы должны сформулировать метрики,\nкоторые имеют значение для бизнеса. Сначала определяем корневые метрики,\nинтересующий бизнес, далее декомпозируем их на то, что на них влияет.Как правило, бизнес интересует внутренняя норма\nприбыли. Следовательно, мы\nдолжны взять данную метрику как корневую и проанализировать, что и в какой\nмере влияет на данную метрику: из чего формируются прибыли и убытки денежного\nпотока.Так же бизнес может задать целью определенные объемы продаж для того, чтобы\nмаксимально полно использовать имеющиеся ресурсы, например капитал.Объемы продаж складываются из первичной лидогенерации — потери на каждом этапе\nворонки продаж. Следовательно, увеличение продаж возможно как за счет\nдополнительной лидогенерации (SEO, платные лиды), так и за счет устранения\nпотерь конверсии.Для устранения потерь конверсии мы должны проанализировать воронку продаж и\nсоотношение количества фактов на различных этапах воронки. Значительное\nпадение фактов на любом этапе воронки продаж является сигналом к анализу\nпричин данного «выпадения».","характеристики-метрики#Характеристики метрики":"","релевантность#Релевантность":"Соответствует ли метрика основным бизнес-целям? Если вы измените значение, это\nприведет к положительным изменениям?","измеримость#Измеримость":"Является ли значение метрик объективным? Вы можете определить формулу расчета\nметрики? Можно ли технически получить данные для расчета метрики?","действенность#Действенность":"Можете ли вы сделать что-то положительное и действенное с данными? Рассчитать\nмотивацию?","надежность#Надежность":"Метрика технически устойчива? Будет ли она актуальной через год? Поможет ли\nона отслеживать прогресс с течением времени?","удобочитаемость#Удобочитаемость":"Может ли значение метрики быть неправильно понято? Требуется ли много\nконтекста для понимания метрики? Есть ли «отставание» метрики, затрудняющее\nоценку?","воронка-продаж#Воронка продаж":"Единицей продаж в нашем продукте является корзина. Мы можем отметить ключевые\nсобытия, в которых происходит интересующее бизнес изменение статуса корзины.\nПерспективные возможности. Воронка продаж начинается с того, что посетитель на сайте изучает описание продукта или иной материал связанный с продуктом, где мы можем предположить интерес клиента.\nЛиды. Момент, когда клиент проявляет ярко выраженный интерес к сделке, идентифицирует себя (регистрируется на сайте), вводит данные или заполняет корзину является следующим существенным изменением состояния. Получив статистику, мы увидим соотношение общего количество сгенерированных лидов к перспективным возможностям.\nЛид может перерасти в заявку. Событием перехода в заявку мы считаем момент когда клиент наполнил корзину и оформил заявку.\nЗаявка может перерасти в сделку. Сделка - это бизнес-цель всего процесса.","управление-рисками#Управление рисками":"Каждое решение, которое принимает менеджер продукта, сопряжено с определенным\nриском. В случае сомнений всегда полезно задавать правильные вопросы,\nвовлекать соответствующие заинтересованные стороны и использовать данные и\nидеи, когда они у вас есть, чтобы принять осознанное решение, и при этом иметь\nвозможность вернуться к чему-то, если вам это абсолютно необходимо.[](https://medium.com/swlh?source=post_sidebar--------------------------\npost_sidebar-)Рассмотрим некоторые вопросы и стратегии, которые можно использовать для\nвыявления, оценки и потенциального снижения рисков, чтобы в конечном итоге\nобеспечить запуск успешного продукта.\nВы правильно расставили приоритеты?\nЗадача приоритизации дорожной карты может быть особенно сложной и сопряженной\nс риском, потому что вы часто учитываете несколько факторов, пытаясь собрать\nдостаточно подтверждающих доказательств для поддержки своих решений. Важно\nубедиться, что вы расставляете приоритеты на основе показателей, которые лучше\nвсего соответствуют целям продукта, ожиданиям бизнеса и руководства, а также\nтому, что клиенту нужно больше всего прямо сейчас.\nНасколько отличается этот продукт для вашей организации от других продуктов или выпусков?\nВ зависимости от того, запускаете ли вы новую версию существующего продукта\nили совершенно новый продукт, ваши риски могут значительно различаться.\nНапример, если вы запускаете новую функцию в стабильном, зрелом продукте, у\nвас, вероятно, уже есть определенные базовые данные о ваших пользователях,\nтехническом стеке, предыдущей производительности продукта и т.д. Это все\nобширные данные, которые вы можете использовать для принимать взвешенные\nрешения о том, подойдет ли новая функция вашей аудитории и насколько\nреалистичны целевые ключевые показатели эффективности. Однако, если вы\nзапускаете совершенно новый продукт или говорите о новой интеграции или\nрасширении продукта, риск определенно выше, поскольку существующие данные\nмогут не служить хорошим показателем. Если вы попали в этот сценарий,\nподумайте об инвестировании в дополнительные исследования пользователей и\nрынка, изучение вторичных источников данных, анализировать конкуренцию и в\nконечном итоге полагаться на свою интуицию и опыт. Это может особенно\nпригодиться, если вам нужно убедить своих руководителей в том, что этот новый\nпродукт / не является жизнеспособной идеей и почему его следует / не следует\nреализовывать.\nНасколько вы уверены в дизайне продукта?\nНетрудно понять, почему менеджеры по маркетингу и дизайнеры должны работать\nрука об руку при разработке новых функций или улучшений. Это необходимо для\nтого, чтобы команда разрабатывала правильный пользовательский интерфейс,\nкоторый реально отвечает целям продукта / функции при минимизации рисков\nпроектирования. Например, работает ли выбор традиционной обработки дизайна\nпротив вашего продукта, потому что контекст кардинально отличается? Всегда\nбезопаснее проводить адекватные исследования и тестирование пользователей,\nкогда в дизайне есть области, которые вызывают неопределенность с точки зрения\nудобства использования или способности достигать целей. Как менеджер проекта,\nвы хотите убедиться, что вы вселяете в свой дизайн столько же уверенности,\nпрежде чем инженеры разработают и протестируют функцию, чтобы снизить\nвероятность внесения изменений в функцию после ее полной разработки (или, что\nеще хуже, после ее выпуска. )\nВы достаточно протестировали?\nКонечно, обеспечение качества - это ключевая часть процесса разработки\nпродукта, но какие еще тесты, по вашему мнению, будут пропущены или\nдополнительно необходимы для обеспечения успешной доставки? Учитывайте ошибки,\nкоторые могут быть пропущены или упущены из виду вашими тестовыми командами\nиз-за того, что не было проведено достаточных полевых испытаний или испытаний\nна долговечность. Некоторые ошибки могут появиться только после непрерывного\nиспользования продукта. Некоторые способы борьбы с этим в качестве менеджера -\nэто встроить адекватное альфа- и бета-тестирование в вашу временную шкалу до\nзапуска. Это поможет вам представить ваш продукт «реальным» пользователям и в\nсреде, очень близкой к той, в которой будут находиться ваши конечные\nпользователи. Внутренние тесты с участием сотрудников в вашей команде или\nорганизации - отличный способ выполнить раннее тестирование, потому что любые\nпотенциальные проблемы остаются внутри вашей организации (и не раскрываются\nзаказчику), и эти тесты относительно рентабельны для запуска и управления. Это\nтакже может быть отличным способом выявить любые существенные проблемы в\nдизайне на основе отзывов пользователей, полученных свежим взглядом.\nНедостатком внутреннего тестирования является то, что вы можете подвергнуться\nпредвзятости, а ваши тестовые пользователи могут не очень хорошо представлять\nваших конечных пользователей. Вот тут-то и появляется бета-тестирование,\nкоторое можно проводить либо через A / B-тестирование, либо через ограниченное\nразвертывание. Менеджерам редко следует предпочесть полноценный запуск Это\nтакже может быть отличным способом выявить любые существенные проблемы в\nдизайне на основе отзывов пользователей, полученных свежим взглядом.\nЯ отслеживаю правильные показатели?\nВажно определить и согласовать правильные показатели, которые нужно\nотслеживать и отслеживать на ранних этапах цикла. Хотя в некоторых случаях эти\nметрики могут быть очевидными на основе целей, поставленных бизнесом, чаще\nвсего менеджеры по менеджменту должны владеть метриками и отслеживать их,\nчтобы наилучшим образом определять рентабельность инвестиций при выпуске, и\nпроверять их у ключевых заинтересованных сторон, чтобы прояснить опасения. С\nтехнической стороны, чтобы иметь данные, которым вы можете доверять, вам\nнеобходимо провести время со своей аналитической командой, чтобы понять,\nоткуда берутся данные, как они агрегируются и в каких отчетах. Могут быть\nразличия в интерпретации данных, и важно согласовать команды в отношении того,\nчто отслеживается и сообщается задолго до выпуска. Более того, если новая\nфункция приносит с собой новые показатели,\nЯ создаю пути отступления?\nПри любом выборе продукта всегда лучше создавать план «отступления». Если вы\nвыпускаете новую версию продукта, есть ли у вас план отката на случай\nнепредвиденных обстоятельств? Есть ли какие-либо соображения по поводу\nобратной совместимости и проверяли ли вы их? Если исправление программного\nобеспечения - единственный путь вперед, насколько сложно и прерывисто его\nадминистрировать? Даже если вы очень уверены в своем продукте / функциях,\nвсегда полезно создать пути отката, чтобы в случае возникновения проблемы у\nвас был относительно безболезненный выход."}}}